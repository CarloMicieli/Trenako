name: main

on:
  push:
    branches: 
      - main
    paths:
      - 'crates/**'
      - 'Cargo.toml'
      - 'Cargo.lock'
      - '.github/workflows/main.yml'
  pull_request:
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: CarloMicieli/trenako-server
  CARGO_TERM_COLOR: always

jobs:
  checks:

    runs-on: ubuntu-22.04

    steps:
      - name: Set up cargo cache
        uses: actions/cache@v3
        continue-on-error: false
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Install rust toolchain
        run: |
          rm -f "${HOME}/.cargo/bin/"{rustfmt,cargo-fmt,cargo-tarpaulin}
          rustup set profile minimal
          rustup toolchain install stable -c "clippy,rustfmt"
          cargo install cargo-tarpaulin
          rustup default stable

      - name: Toolchain info
        run: |
          rustc --version
          cargo --version --verbose
          cargo clippy --version
          cargo fmt --version
          cargo tarpaulin --version

      - name: Run cargo check
        run: cargo check

      - name: Check formatting with rustfmt
        run: cargo fmt --all --check

      - name: Linting with Clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Run tests
        run: cargo test --no-fail-fast

      - name: Run cargo-tarpaulin
        run: cargo tarpaulin --ignore-tests --out Xml -- --test-threads 1

  docker:
    runs-on: ubuntu-22.04
    needs: checks

    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            # set latest tag for default branch
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'main') }}
            type=sha          

      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
