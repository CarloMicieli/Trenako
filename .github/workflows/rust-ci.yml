name: rust-ci

on:
  push:
    paths:
      - '.github/workflows/rust-ci.yml'
      - 'Cargo.lock'
      - 'Cargo.toml'
      - 'crates/**'
      - 'migrations/**'
      - 'rust-toolchain.toml'
      - 'rustfmt.toml'
      - 'sqlx-data.json'
  pull_request:
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  CARGO_MAKE_RUN_CODECOV: true
  SQLX_OFFLINE: true

jobs:
  checks:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Install rust toolchain
        run: |
          rustup set profile minimal
          rustup toolchain install stable
          cargo install --force cargo-make

      - name: Set up cargo cache
        uses: actions/cache@v3
        continue-on-error: false
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry
            ~/.cargo/git
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

      - name: Toolchain info
        run: |
          rustc --version
          cargo --version --verbose

      - name: Run cargo check
        run: cargo make check

      - name: Check formatting with rustfmt
        run: cargo make fmt-check

      - name: Linting with Clippy
        run: cargo make clippy

      - name: Run tests
        run: cargo make test

      - name: Run cargo-tarpaulin
        run: cargo make code-coverage
        if: github.ref == 'refs/heads/dev'

      - name: Upload coverage to Codecov.io
        uses: codecov/codecov-action@v3
        if: github.ref == 'refs/heads/dev'
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true
          verbose: true

      - name: Archive code coverage results
        uses: actions/upload-artifact@v3
        if: github.ref == 'refs/heads/dev'
        with:
          name: code-coverage-report
          path: cobertura.xml

  docker:
    runs-on: ubuntu-22.04
    needs: checks
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            # set latest tag for default branch
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'main') }}
            type=sha          

      - name: Build and push Docker image (server)
        uses: docker/build-push-action@v3
        with:
          context: .
          file: docker/server.dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Build and push Docker image (cli)
        uses: docker/build-push-action@v3
        with:
          context: .
          file: docker/cli.dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
