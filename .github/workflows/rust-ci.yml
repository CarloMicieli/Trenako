name: rust-ci

on:
  push:
    paths:
      - '.github/workflows/rust-ci.yml'
      - 'Cargo.lock'
      - 'Cargo.toml'
      - 'crates/**'
      - 'Makefile.toml'
      - 'migrations/**'
      - 'rust-toolchain.toml'
      - 'rustfmt.toml'
      - 'sqlx-data.json'
  pull_request:
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  CARGO_MAKE_RUN_CODECOV: true
  SQLX_OFFLINE: true
  REGISTRY: ghcr.io
  LOCAL_REGISTRY: localhost:5000 
  IMAGE_NAME: carlomicieli/trenako-server

jobs:
  checks:
    runs-on: ubuntu-22.04
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Setup node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Install bunyan
        run: npm install -g bunyan

      - name: Get current MSRV from Cargo.toml
        id: get-msrv
        run: echo "MSRV=$(cat ./Cargo.toml | grep rust-version | sed 's/.* = "//; s/"//')" >> $GITHUB_OUTPUT

      - name: Get current rustc version
        id: get-rustc-version
        run: echo "RUSTC_VERSION=$(rustc --version | cut -c 7-10)" >> $GITHUB_OUTPUT

      - name: Install rust toolchain
        run: |
          rustup set profile minimal
          rustup toolchain install stable
        if: ${{ steps.get-rustc-version.outputs.RUSTC_VERSION != steps.get-msrv.outputs.MSRV }}

      - name: Install cargo make
        run: cargo install cargo-make@0.36.7

      - name: Set up cargo cache
        uses: actions/cache@v3
        continue-on-error: false
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry
            ~/.cargo/git
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

      - name: Toolchain info
        run: |
          rustc --version
          cargo --version --verbose
          cargo make --version

      - name: Run cargo check
        run: cargo make check

      - name: Check formatting with rustfmt
        run: cargo make fmt-check

      - name: Linting with Clippy
        run: cargo make clippy

      - name: Run the unit tests
        run: cargo make unit-test

      - name: Run the integration tests
        run: cargo make integration-test | bunyan

      - name: Run cargo-tarpaulin
        run: cargo make code-coverage
        if: github.ref == 'refs/heads/dev'

      - name: Upload coverage to Codecov.io
        uses: codecov/codecov-action@v3
        if: github.ref == 'refs/heads/dev'
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true
          verbose: true

      - name: Archive code coverage results
        uses: actions/upload-artifact@v3
        if: github.ref == 'refs/heads/dev'
        with:
          name: code-coverage-report
          path: cobertura.xml

  docker:
    runs-on: ubuntu-22.04
    #needs: checks
    permissions:
      contents: read
      packages: write    
    # if: github.ref == 'refs/heads/main'
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000

    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@v1

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          build-root-directory: e2e

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          driver-opts: network=host

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
            ${{ env.LOCAL_REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            # set latest tag for default branch
            # type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'main') }}
            type=raw,value=latest
            type=raw,value={{date 'YYYYMMDDHHmmss'}}-{{sha}}      

      - name: Build and export to Docker (server)
        uses: docker/build-push-action@v4
        with:
          context: .
          file: docker/server.dockerfile
          load: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: List docker images
        run: docker image ls

      - name: Run the E2E tests
        uses: gradle/gradle-build-action@v2
        env:
          REGISTRY_NAME: localhost:5000
        with:
          arguments: api:test
          build-root-directory: e2e
