version: "3.9"

services:
  db:
    image: postgres:15.2-alpine
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_DB: trenakodb
      POSTGRES_PASSWORD: mysecretpassword
    volumes:
      - db-data:/var/lib/postgresql/data
      - ./docker/init-db:/docker-entrypoint-initdb.d
    networks:
      - backend
    healthcheck:
      test: [ CMD-SHELL, 'pg_isready -U postgres' ]
      interval: 10s
      timeout: 5s
      retries: 5

  db_migrations:
    container_name: db_migrations
    image: ghr.io/carlomicieli/trenako-migrations:latest
    build:
      context: .
      dockerfile: docker/migrations.dockerfile
    depends_on:
      db:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://postgres:mysecretpassword@db:5432/trenakodb
    networks:
      - backend

  db_admin:
    container_name: db_admin
    image: dpage/pgadmin4:6.18
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "9000:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@mail.com
      PGADMIN_DEFAULT_PASSWORD: password
    volumes:
      - ./docker/pgadmin/servers.json:/pgadmin4/servers.json # preconfigured servers/connections
      - ./docker/pgadmin/pgpass:/pgpass # passwords for the connections in this file
    networks:
      - backend

  server:
    image: ghr.io/carlomicieli/trenako-server:latest
    build:
      context: .
      dockerfile: docker/server.dockerfile
    depends_on:
      db:
        condition: service_healthy
      db_migrations:
        condition: service_completed_successfully
    environment:
      SERVER__HOST: 0.0.0.0
      SERVER__PORT: 5000
      SERVER__WORKERS: 4
      DATABASE__NAME: trenakodb
      DATABASE__USERNAME: postgres
      DATABASE__PASSWORD: mysecretpassword
      DATABASE__HOST: db
      DATABASE__PORT: 5432
      DATABASE__MIN_CONNECTIONS: 5
      DATABASE__MAX_CONNECTIONS: 25
    ports:
      - "5000:5000"
    networks:
      - backend
    healthcheck:
      test: curl --fail http://localhost:5000/health-check || exit 1
      start_period: 10s
      interval: 60s
      timeout: 10s
      retries: 5

  seeding:
    image: ghr.io/carlomicieli/trenako-cli:latest
    build:
      context: .
      dockerfile: docker/cli.dockerfile
    depends_on:
      db:
        condition: service_healthy
      server:
        condition: service_healthy
    volumes:
      - ./dataset:/dataset
    networks:
      - backend

  openapi:
    image: ghr.io/carlomicieli/trenako-openapi:latest
    build:
      context: .
      dockerfile: docker/openapi.dockerfile
    ports:
      - "9001:80"
    networks:
      - backend
    healthcheck:
      test: curl --fail http://localhost || exit 1
      start_period: 10s
      interval: 60s
      timeout: 10s
      retries: 5

networks:
  backend:

volumes:
  db-data:
